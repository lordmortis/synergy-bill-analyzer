{"version":3,"file":"static/js/156.b9d6f2f9.chunk.js","mappings":"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","sources":["worker/SynergyImportWorker.ts"],"sourcesContent":["const LFVal:number = 0x0A;\nconst CRVal:number = 0x0D;\n\nexport enum ReadingStatusEnum {\n  unknown,\n  actual\n}\n\nexport type Entry = {\n  date : Date;\n  time : number;\n  kWh : number;\n  kW : number;\n  kVA : number;\n  powerFactor: number;\n  readingStatus: ReadingStatusEnum;\n}\n\ntype State = {\n  busy : boolean,\n  currentFile : string | null,\n}\n\nconst state:State = {\n  busy: false,\n  currentFile: null,\n};\n\nexport enum MessageType {\n  Unknown,\n  ImportStart,\n  ImportEnd,\n  NewRecords,\n  Error,\n}\n\nexport type Message = ReturnType<\n  typeof errorMessage | typeof importStart | typeof importEnd | typeof importedRecords\n>\n\nfunction errorMessage(error:string) {\n  return {\n    type: MessageType.Error,\n    error: error,\n  } as const;\n}\n\nfunction importStart() {\n  return {\n    type: MessageType.ImportStart,\n  } as const;\n}\n\nfunction importEnd() {\n  return {\n    type: MessageType.ImportEnd,\n  } as const;\n}\n\nfunction importedRecords(records:Entry[], recordNumber: number) {\n  return {\n    type: MessageType.NewRecords,\n    records: records,\n    recordNumber: recordNumber,\n  } as const;\n}\n\nfunction postMessage(message:Message) {\n  // eslint-disable-next-line no-restricted-globals\n  self.postMessage(message);\n}\n\nfunction parseDate(string: string):Date {\n  const parts = string.split(\"/\");\n  const theDate = new Date();\n  theDate.setFullYear(\n    parseInt(parts[2], 10),\n    parseInt(parts[1], 10) - 1,\n    parseInt(parts[0], 10)\n  );\n  theDate.setHours(0, 0, 1, 0);\n  return theDate;\n}\n\nfunction parseTime(string: string):number {\n  const parts = string.split(\":\");\n  let time = parseInt(parts[0], 10);\n  if (parts[1] === \"30\") time += 0.5;\n  return time;\n}\n\nfunction parseStatus(string: string):ReadingStatusEnum {\n  switch(string.toLowerCase()) {\n    case \"actual\": return ReadingStatusEnum.actual;\n    default: return ReadingStatusEnum.unknown;\n  }\n}\n\nfunction parse(lineBuffer: string): Entry {\n  const parts = lineBuffer.split(\",\");\n  return {\n    date: parseDate(parts[0]),\n    time: parseTime(parts[1]),\n    kWh: parseFloat(parts[2]),\n    kW: parseFloat(parts[3]),\n    kVA: parseFloat(parts[4]),\n    powerFactor: parseFloat(parts[5]),\n    readingStatus: parseStatus(parts[6]),\n  };\n}\n\nasync function ReadData(reader:ReadableStreamDefaultReader<Uint8Array>) {\n  const sendRecordsNum = 100;\n  const decoder = new TextDecoder();\n\n  let header = true;\n  let lineBuffer:string | null = null;\n  let remainingBuffer:Uint8Array | null = null;\n  let startingRecordNumber = 0;\n  let recordNumber = 0;\n  const recordArray:Entry[] = Array(0);\n\n  let keepReading = true;\n  while(keepReading) {\n    let result = await reader.read();\n    if (result.done) keepReading = false;\n    if (result.value === undefined) continue;\n    const chunk= result.value;\n\n    let offset = 0;\n    let index = 0;\n    let sawCR = false;\n    if (chunk.length === 0) continue;\n    while(index <= chunk.length) {\n      if (chunk[index] === CRVal) {\n        sawCR = true;\n      } else if (chunk[index] === LFVal) {\n        let decodeArray:Uint8Array;\n        if (remainingBuffer != null) {\n          decodeArray = new Uint8Array(remainingBuffer.length + (sawCR ? index - 1 : index - offset));\n          decodeArray.set(remainingBuffer, 0);\n          decodeArray.set(chunk.subarray(offset, sawCR ? index - 1 : index), remainingBuffer.length);\n          remainingBuffer = null;\n        } else {\n          decodeArray = chunk.subarray(offset, sawCR ? index - 1 : index);\n        }\n        if (offset < index) lineBuffer = decoder.decode(decodeArray);\n        offset = index + 1;\n        sawCR = false;\n      }\n      index++;\n      if (lineBuffer != null) {\n        if (header) {\n          if (lineBuffer.startsWith(\"Date,Time,kWh\")) header = false;\n        } else {\n          recordArray.push(parse(lineBuffer));\n          recordNumber++;\n          if (recordArray.length >= sendRecordsNum) {\n            postMessage(importedRecords(recordArray, startingRecordNumber))\n            startingRecordNumber = recordNumber;\n            recordArray.splice(0, recordArray.length);\n          }\n        }\n        lineBuffer = null;\n      }\n    }\n\n    if (offset < index) remainingBuffer = chunk.subarray(offset, index);\n  }\n\n  if (recordArray.length > 0) postMessage(importedRecords(recordArray, startingRecordNumber))\n}\n\nfunction StartImport(file:File) {\n  if (state.busy) {\n    postMessage(errorMessage(\"Currently Busy\"));\n    return;\n  }\n\n  postMessage(importStart());\n  state.busy = true;\n  state.currentFile = file.name;\n\n\n  ReadData(file.stream().getReader()).finally(() => {\n    state.busy = false;\n    postMessage(importEnd());\n    state.currentFile = null;\n  })\n}\n\n// eslint-disable-next-line no-restricted-globals\nself.onmessage = (e: MessageEvent<File>) => {\n  if (typeof(e.data.stream) === \"function\") {\n    StartImport(e.data);\n  }\n}\n\nexport {};"],"names":["LFVal","CRVal","ReadingStatusEnum","state","busy","currentFile","MessageType","importedRecords","records","recordNumber","type","NewRecords","postMessage","message","self","parseDate","string","parts","split","theDate","Date","setFullYear","parseInt","setHours","parseTime","time","parse","lineBuffer","date","kWh","parseFloat","kW","kVA","powerFactor","readingStatus","toLowerCase","actual","unknown","StartImport","file","error","Error","ImportStart","name","async","reader","decoder","TextDecoder","header","remainingBuffer","startingRecordNumber","recordArray","Array","keepReading","result","read","done","undefined","value","chunk","offset","index","sawCR","length","decodeArray","Uint8Array","set","subarray","decode","startsWith","push","splice","ReadData","stream","getReader","finally","ImportEnd","onmessage","e","data"],"sourceRoot":""}